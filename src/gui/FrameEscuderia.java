package gui;

import formula.Carrera;
import formula.Circuito;
import formula.Coche;
import formula.Escuderia;
import formula.Mundial;
import formula.Participante;
import formula.PilotoDecorador;
import formula.PilotoLibre;
import formula.PilotoOficial;
import formula.PilotoProbador;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOME3
 */
public class FrameEscuderia extends FormulaFrame {

    /**
     * Creates new form FrameEscuderia
     */
    public FrameEscuderia() throws ClassNotFoundException, IOException {
        initComponents();
        cargarDatos();
        asignarEventosEnVentana();
        cargarComboPincipal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLGestionDeEscuderia = new javax.swing.JLabel();
        jBtnEscuderiaVolver = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCoches = new javax.swing.JTable();
        jBtnEliminarCoche = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldModelo = new javax.swing.JTextField();
        jSliderPotencia = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSliderNeumaticos = new javax.swing.JSlider();
        jSliderAero = new javax.swing.JSlider();
        jBtnCocheAleatorio = new javax.swing.JButton();
        jBtnGuardarCoche = new javax.swing.JButton();
        jLabelPotencia = new javax.swing.JLabel();
        jLabelAero = new javax.swing.JLabel();
        jLabelNeumaticos = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTablePilotosOficiales = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTablePilotosProbadores = new javax.swing.JTable();
        jBtnDespedirPilotoProbador = new javax.swing.JButton();
        jBtnDespedirPilotoOficial = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTablePilotosLibres = new javax.swing.JTable();
        jBtnFicharLibreComoOficial = new javax.swing.JButton();
        jBtnFicharLibreComoProbador = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTablePilotosOficialesIntercambiar = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTablePilotosProbadoresIntercambiar = new javax.swing.JTable();
        jComboBoxEscuderiaIntercambiar = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        jBtnFicharOficialComoProbador = new javax.swing.JButton();
        jBtnFicharOficialComoOficial = new javax.swing.JButton();
        jBtnFicharProbadorComoProbador = new javax.swing.JButton();
        jBtnFicharProbadorComoOficial = new javax.swing.JButton();
        jBtnIntercambiarOficial = new javax.swing.JButton();
        jBtnIntercambiarProbador = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCircuitosEntrenar = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCochesEntrenar = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePilotosOficialesEntrenar = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTablePilotosProbadoresEntrenar = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableCarreras = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableParticipantes = new javax.swing.JTable();
        jBtnEliminarParticipante = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jComboBoxOficiales = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxCoches = new javax.swing.JComboBox();
        jBtnAñadirParticipante = new javax.swing.JButton();
        jComboBoxPrincipal = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLGestionDeEscuderia.setText("GESTIÓN DE ESCUDERÍA");

        jBtnEscuderiaVolver.setText("Volver");
        jBtnEscuderiaVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEscuderiaVolverActionPerformed(evt);
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jTableCoches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Modelo", "Velocidad en recta", "Velocidad en curva"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCoches.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableCoches);

        jBtnEliminarCoche.setText("Eliminar");
        jBtnEliminarCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarCocheActionPerformed(evt);
            }
        });

        jLabel9.setText("Modelo:");

        jLabel10.setText("Potencia:");

        jTextFieldModelo.setInputVerifier(new NotEmptyVerifier());

        jSliderPotencia.setMaximum(500);
        jSliderPotencia.setValue(0);
        jSliderPotencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderPotenciaStateChanged(evt);
            }
        });

        jLabel12.setText("Aerodinámica:");

        jLabel13.setText("Neumáticos:");

        jSliderNeumaticos.setMaximum(500);
        jSliderNeumaticos.setValue(0);
        jSliderNeumaticos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderNeumaticosStateChanged(evt);
            }
        });

        jSliderAero.setMaximum(500);
        jSliderAero.setValue(0);
        jSliderAero.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderAeroStateChanged(evt);
            }
        });

        jBtnCocheAleatorio.setText("Aleatorio");
        jBtnCocheAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCocheAleatorioActionPerformed(evt);
            }
        });

        jBtnGuardarCoche.setText("Guardar");
        jBtnGuardarCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarCocheActionPerformed(evt);
            }
        });

        jLabelPotencia.setText("0.0");

        jLabelAero.setText("0.0");

        jLabelNeumaticos.setText("0.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jBtnGuardarCoche))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10))
                            .addComponent(jLabel12))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jSliderAero, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelAero, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldModelo, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jSliderPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelPotencia, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jSliderNeumaticos, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelNeumaticos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCocheAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jBtnCocheAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSliderPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelPotencia))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelAero, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSliderAero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel13))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabelNeumaticos))))
                            .addComponent(jSliderNeumaticos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnGuardarCoche))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jBtnEliminarCoche)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(453, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnEliminarCoche)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Fabricar Coches", jPanel1);

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));

        jLabel3.setText("Pilotos Oficiales:");

        jTablePilotosOficiales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Valoración"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosOficiales.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosOficiales.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosOficialesFocusGained(evt);
            }
        });
        jScrollPane8.setViewportView(jTablePilotosOficiales);

        jLabel4.setText("Pilotos Probadores:");

        jTablePilotosProbadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Valoración"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosProbadores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosProbadores.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosProbadoresFocusGained(evt);
            }
        });
        jScrollPane9.setViewportView(jTablePilotosProbadores);

        jBtnDespedirPilotoProbador.setText("Despedir");
        jBtnDespedirPilotoProbador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDespedirPilotoProbadorActionPerformed(evt);
            }
        });

        jBtnDespedirPilotoOficial.setText("Despedir");
        jBtnDespedirPilotoOficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDespedirPilotoOficialActionPerformed(evt);
            }
        });

        jLabel25.setText("Tus pilotos");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jBtnDespedirPilotoOficial)
                    .addComponent(jLabel4)
                    .addComponent(jBtnDespedirPilotoProbador)
                    .addComponent(jLabel25)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnDespedirPilotoOficial)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnDespedirPilotoProbador)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(0, 204, 255));

        jLabel1.setText("Pilotos:");

        jTablePilotosLibres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Valoración", "Sueldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosLibres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane7.setViewportView(jTablePilotosLibres);

        jBtnFicharLibreComoOficial.setText("Fichar como Oficial");
        jBtnFicharLibreComoOficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharLibreComoOficialActionPerformed(evt);
            }
        });

        jBtnFicharLibreComoProbador.setText("Fichar como Probador");
        jBtnFicharLibreComoProbador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharLibreComoProbadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jBtnFicharLibreComoProbador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnFicharLibreComoOficial, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnFicharLibreComoProbador)
                    .addComponent(jBtnFicharLibreComoOficial))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 102, 102));

        jLabel5.setText("Pilotos Oficiales:");

        jTablePilotosOficialesIntercambiar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Valoración"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosOficialesIntercambiar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosOficialesIntercambiar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosOficialesIntercambiarFocusGained(evt);
            }
        });
        jScrollPane10.setViewportView(jTablePilotosOficialesIntercambiar);

        jLabel23.setText("Pilotos Probadores:");

        jTablePilotosProbadoresIntercambiar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Completo", "Valoración"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosProbadoresIntercambiar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosProbadoresIntercambiar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosProbadoresIntercambiarFocusGained(evt);
            }
        });
        jScrollPane11.setViewportView(jTablePilotosProbadoresIntercambiar);

        jComboBoxEscuderiaIntercambiar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEscuderiaIntercambiarItemStateChanged(evt);
            }
        });

        jLabel24.setText("Intercambiar");

        jBtnFicharOficialComoProbador.setText("Fichar como Probador");
        jBtnFicharOficialComoProbador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharOficialComoProbadorActionPerformed(evt);
            }
        });

        jBtnFicharOficialComoOficial.setText("Fichar como Oficial");
        jBtnFicharOficialComoOficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharOficialComoOficialActionPerformed(evt);
            }
        });

        jBtnFicharProbadorComoProbador.setText("Fichar como Probador");
        jBtnFicharProbadorComoProbador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharProbadorComoProbadorActionPerformed(evt);
            }
        });

        jBtnFicharProbadorComoOficial.setText("Fichar como Oficial");
        jBtnFicharProbadorComoOficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFicharProbadorComoOficialActionPerformed(evt);
            }
        });

        jBtnIntercambiarOficial.setText("Intercambiar");
        jBtnIntercambiarOficial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIntercambiarOficialActionPerformed(evt);
            }
        });

        jBtnIntercambiarProbador.setText("Intercambiar");
        jBtnIntercambiarProbador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIntercambiarProbadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel23)
                                .addComponent(jLabel24)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxEscuderiaIntercambiar, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(4, 4, 4)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jBtnFicharOficialComoProbador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnIntercambiarOficial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnFicharOficialComoOficial))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jBtnFicharProbadorComoProbador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnIntercambiarProbador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnFicharProbadorComoOficial)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEscuderiaIntercambiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnFicharOficialComoProbador)
                    .addComponent(jBtnIntercambiarOficial)
                    .addComponent(jBtnFicharOficialComoOficial))
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnFicharProbadorComoProbador)
                    .addComponent(jBtnIntercambiarProbador)
                    .addComponent(jBtnFicharProbadorComoOficial))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Gestionar Pilotos", jPanel2);

        jPanel9.setBackground(new java.awt.Color(255, 153, 153));

        jLabel26.setText("Circuitos:");

        jTableCircuitosEntrenar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Canon"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCircuitosEntrenar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTableCircuitosEntrenar);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(153, 0, 102));

        jLabel27.setText("Coches:");

        jTableCochesEntrenar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Modelo", "Potencia", "Aerodinamica", "Neumaticos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCochesEntrenar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jTableCochesEntrenar);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(0, 153, 153));

        jLabel28.setText("Pilotos Oficiales:");

        jTablePilotosOficialesEntrenar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Valoración"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosOficialesEntrenar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosOficialesEntrenar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosOficialesEntrenarFocusGained(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePilotosOficialesEntrenar);

        jLabel29.setText("Pilotos Probadores:");

        jTablePilotosProbadoresEntrenar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Valoración"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePilotosProbadoresEntrenar.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTablePilotosProbadoresEntrenar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePilotosProbadoresEntrenarFocusGained(evt);
            }
        });
        jScrollPane5.setViewportView(jTablePilotosProbadoresEntrenar);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(0, 124, Short.MAX_VALUE))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Entrenar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Entrenar", jPanel7);

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        jLabel6.setText("Carreras:");

        jTableCarreras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCarreras.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(jTableCarreras);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 221, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(0, 204, 204));

        jLabel7.setText("Participantes:");

        jTableParticipantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Piloto", "Coche"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableParticipantes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane12.setViewportView(jTableParticipantes);

        jBtnEliminarParticipante.setText("Eliminar");
        jBtnEliminarParticipante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarParticipanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnEliminarParticipante)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnEliminarParticipante)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBackground(new java.awt.Color(102, 255, 102));

        jLabel8.setText("Piloto Oficial:");

        jLabel11.setText("Coche:");

        jBtnAñadirParticipante.setText("Guardar");
        jBtnAñadirParticipante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAñadirParticipanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxCoches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxOficiales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jBtnAñadirParticipante))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBoxOficiales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jComboBoxCoches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnAñadirParticipante)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Configurar Carreras", jPanel12);

        jComboBoxPrincipal.setModel(new DefaultComboBoxModel());
        jComboBoxPrincipal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPrincipalItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLGestionDeEscuderia)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnEscuderiaVolver)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLGestionDeEscuderia)
                    .addComponent(jComboBoxPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnEscuderiaVolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    private void jBtnEscuderiaVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEscuderiaVolverActionPerformed
        volverAVentanaPrincpal();
    }//GEN-LAST:event_jBtnEscuderiaVolverActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
                // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus

    private void jComboBoxPrincipalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPrincipalItemStateChanged
        Integer escuderiaSeleccionada = jComboBoxPrincipal.getSelectedIndex() - 1;
        if (escuderiaSeleccionada < 0) {
            limpiarDatosDeVentana();
        } else {
            ArrayList<Escuderia> escuderias = mundial.getEscuderias();
            cargarEscuderiaEnVentana(escuderias.get(escuderiaSeleccionada));
        }
    }//GEN-LAST:event_jComboBoxPrincipalItemStateChanged

    private void jBtnCocheAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCocheAleatorioActionPerformed
        generarCaracteristicasAleatorias();
    }//GEN-LAST:event_jBtnCocheAleatorioActionPerformed

    private void jBtnEliminarCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarCocheActionPerformed
        eliminarCoche();
    }//GEN-LAST:event_jBtnEliminarCocheActionPerformed

    private void jSliderPotenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPotenciaStateChanged
        ponerValorEnEtiquetaSlider(jSliderPotencia, jLabelPotencia);
    }//GEN-LAST:event_jSliderPotenciaStateChanged

    private void jSliderAeroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderAeroStateChanged
        ponerValorEnEtiquetaSlider(jSliderAero, jLabelAero);
    }//GEN-LAST:event_jSliderAeroStateChanged

    private void jSliderNeumaticosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderNeumaticosStateChanged
        ponerValorEnEtiquetaSlider(jSliderNeumaticos, jLabelNeumaticos);
    }//GEN-LAST:event_jSliderNeumaticosStateChanged

    private void jBtnGuardarCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarCocheActionPerformed
        crearCoche();
    }//GEN-LAST:event_jBtnGuardarCocheActionPerformed

    private void jBtnFicharLibreComoProbadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharLibreComoProbadorActionPerformed
        Integer filaSeleccionada = jTablePilotosLibres.getSelectedRow();
        if (filaSeleccionada != -1 && escuderia.puedeFicharPilotoProbador()) {
            ArrayList<PilotoLibre> pilotosLibres = mundial.getPilotos();
            PilotoLibre pilotoLibre = pilotosLibres.get(filaSeleccionada);
            if (escuderia.tienePresupuestoSuficiente(pilotoLibre.getSueldo())) {
                pilotosLibres.remove(pilotoLibre);
                escuderia.ficharPiloto(new PilotoProbador(pilotoLibre));
                cargarTablaPilotosLibres();
                cargarTablaPilotosProbadores();
            }
        }
    }//GEN-LAST:event_jBtnFicharLibreComoProbadorActionPerformed

    private void jBtnDespedirPilotoProbadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDespedirPilotoProbadorActionPerformed
        Integer filaSeleccionada = jTablePilotosProbadores.getSelectedRow();
        if (filaSeleccionada != -1) {
            PilotoProbador piloto = escuderia.getPilotosProbadores().get(filaSeleccionada);
            escuderia.descartarPiloto(piloto);
            ArrayList<PilotoLibre> pilotosLibres = mundial.getPilotos();
            pilotosLibres.add(piloto.getPiloto());
            cargarTablaPilotosLibres();
            cargarTablaPilotosProbadores();
        }
    }//GEN-LAST:event_jBtnDespedirPilotoProbadorActionPerformed

    private void jBtnFicharLibreComoOficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharLibreComoOficialActionPerformed
        Integer filaSeleccionada = jTablePilotosLibres.getSelectedRow();
        if (filaSeleccionada != -1 && escuderia.puedeFicharPilotoOficial()) {
            ArrayList<PilotoLibre> pilotosLibres = mundial.getPilotos();
            PilotoLibre pilotoLibre = pilotosLibres.get(filaSeleccionada);
            if (escuderia.tienePresupuestoSuficiente(pilotoLibre.getSueldo())) {
                pilotosLibres.remove(pilotoLibre);
                escuderia.ficharPiloto(new PilotoOficial(pilotoLibre));
                cargarTablaPilotosLibres();
                cargarTablaPilotosOficiales();
            }
        }
    }//GEN-LAST:event_jBtnFicharLibreComoOficialActionPerformed

    private void jBtnDespedirPilotoOficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDespedirPilotoOficialActionPerformed
        Integer filaSeleccionada = jTablePilotosOficiales.getSelectedRow();
        if (filaSeleccionada != -1 && escuderia.puedeDescartarPilotoOficial()) {
            PilotoOficial piloto = escuderia.getPilotosOficiales().get(filaSeleccionada);
            escuderia.descartarPiloto(piloto);
            ArrayList<PilotoLibre> pilotosLibres = mundial.getPilotos();
            pilotosLibres.add(piloto.getPiloto());
            cargarTablaPilotosLibres();
            cargarTablaPilotosOficiales();
        }
    }//GEN-LAST:event_jBtnDespedirPilotoOficialActionPerformed

    private void jComboBoxEscuderiaIntercambiarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEscuderiaIntercambiarItemStateChanged
        Integer escuderiaSeleccionada = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        if (escuderiaSeleccionada >= 0) {
            cargarPilotosEscuderiaEnFormularioIntercambiar(mundial.getEscuderia(escuderiaSeleccionada));
        }
    }//GEN-LAST:event_jComboBoxEscuderiaIntercambiarItemStateChanged

    private void jTablePilotosOficialesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosOficialesFocusGained
        jTablePilotosProbadores.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosOficialesFocusGained

    private void jTablePilotosProbadoresFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosProbadoresFocusGained
        jTablePilotosOficiales.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosProbadoresFocusGained

    private void jTablePilotosOficialesIntercambiarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosOficialesIntercambiarFocusGained
        jTablePilotosProbadoresIntercambiar.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosOficialesIntercambiarFocusGained

    private void jTablePilotosProbadoresIntercambiarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosProbadoresIntercambiarFocusGained
        jTablePilotosOficialesIntercambiar.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosProbadoresIntercambiarFocusGained

    private void jBtnFicharOficialComoProbadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharOficialComoProbadorActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoIndice = jTablePilotosOficialesIntercambiar.getSelectedRow();
        if (escuderiaIndice != -1 && pilotoIndice != -1) {
            Escuderia escuderiaSalida = mundial.getEscuderia(escuderiaIndice);
            if (escuderia.puedeFicharPilotoProbador() && escuderiaSalida.puedeDescartarPilotoOficial()) {
                PilotoOficial oficial = escuderiaSalida.getPilotosOficiales().get(pilotoIndice);
                if (escuderia.tienePresupuestoSuficiente(oficial.getSueldo())) {
                    escuderiaSalida.descartarPiloto(oficial);
                    escuderia.ficharPiloto(new PilotoProbador((oficial.getPiloto())));
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaSalida);
                    cargarTablaPilotosProbadores();
                }
            }
        }
    }//GEN-LAST:event_jBtnFicharOficialComoProbadorActionPerformed

    private void jBtnFicharProbadorComoProbadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharProbadorComoProbadorActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoIndice = jTablePilotosProbadoresIntercambiar.getSelectedRow();
        if (escuderiaIndice != -1 && pilotoIndice != -1) {
            Escuderia escuderiaSalida = mundial.getEscuderia(escuderiaIndice);
            if (escuderia.puedeFicharPilotoProbador()) {
                PilotoProbador oficial = escuderiaSalida.getPilotosProbadores().get(pilotoIndice);
                if (escuderia.tienePresupuestoSuficiente(oficial.getSueldo())) {
                    escuderiaSalida.descartarPiloto(oficial);
                    escuderia.ficharPiloto(new PilotoProbador((oficial.getPiloto())));
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaSalida);
                    cargarTablaPilotosProbadores();
                }
            }
        }
    }//GEN-LAST:event_jBtnFicharProbadorComoProbadorActionPerformed

    private void jBtnFicharOficialComoOficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharOficialComoOficialActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoIndice = jTablePilotosOficialesIntercambiar.getSelectedRow();
        if (escuderiaIndice != -1 && pilotoIndice != -1) {
            Escuderia escuderiaSalida = mundial.getEscuderia(escuderiaIndice);
            if (escuderia.puedeFicharPilotoOficial() && escuderiaSalida.puedeDescartarPilotoOficial()) {
                PilotoOficial oficial = escuderiaSalida.getPilotosOficiales().get(pilotoIndice);
                if (escuderia.tienePresupuestoSuficiente(oficial.getSueldo())) {
                    escuderiaSalida.descartarPiloto(oficial);
                    escuderia.ficharPiloto(new PilotoOficial((oficial.getPiloto())));
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaSalida);
                    cargarTablaPilotosOficiales();
                }
            }
        }
    }//GEN-LAST:event_jBtnFicharOficialComoOficialActionPerformed

    private void jBtnFicharProbadorComoOficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFicharProbadorComoOficialActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoIndice = jTablePilotosProbadoresIntercambiar.getSelectedRow();
        if (escuderiaIndice != -1 && pilotoIndice != -1) {
            Escuderia escuderiaSalida = mundial.getEscuderia(escuderiaIndice);
            if (escuderia.puedeFicharPilotoProbador()) {
                PilotoProbador oficial = escuderiaSalida.getPilotosProbadores().get(pilotoIndice);
                if (escuderia.tienePresupuestoSuficiente(oficial.getSueldo())) {
                    escuderiaSalida.descartarPiloto(oficial);
                    escuderia.ficharPiloto(new PilotoOficial(oficial.getPiloto()));
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaSalida);
                    cargarTablaPilotosOficiales();
                }
            }
        }
    }//GEN-LAST:event_jBtnFicharProbadorComoOficialActionPerformed

    private void jBtnIntercambiarOficialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIntercambiarOficialActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoAjenoIndice = jTablePilotosOficialesIntercambiar.getSelectedRow();
        Integer pilotoPropioIndice = jTablePilotosOficiales.getSelectedRow();
        Boolean oficial = true;
        if (pilotoPropioIndice == -1) {
            pilotoPropioIndice = jTablePilotosProbadores.getSelectedRow();
            oficial = false;
        }
        if (escuderiaIndice != -1 && pilotoAjenoIndice != -1 && pilotoPropioIndice != -1) {
            Escuderia escuderiaAjena = mundial.getEscuderia(escuderiaIndice);
            PilotoDecorador pilotoAjeno = escuderiaAjena.getPilotosOficiales().get(pilotoAjenoIndice);
            PilotoDecorador pilotoPropio;
            if (oficial) {
                pilotoPropio = escuderia.getPilotosOficiales().get(pilotoPropioIndice);
            } else {
                pilotoPropio = escuderia.getPilotosProbadores().get(pilotoPropioIndice);
            }
            if (Escuderia.sonPilotosIntercambiables(pilotoPropio,pilotoAjeno)) {
                if (escuderiaAjena.tienePresupuestoSuficiente(pilotoPropio.getSueldo()) && escuderia.tienePresupuestoSuficiente(pilotoAjeno.getSueldo())) {
                    escuderia.intercambiarPiloto(pilotoPropio, pilotoAjeno);
                    escuderiaAjena.intercambiarPiloto(pilotoAjeno, pilotoPropio);
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaAjena);
                    cargarTablaPilotosOficiales();
                    cargarTablaPilotosProbadores();
                }
            }
        }
    }//GEN-LAST:event_jBtnIntercambiarOficialActionPerformed

    private void jBtnIntercambiarProbadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIntercambiarProbadorActionPerformed
        Integer escuderiaIndice = jComboBoxEscuderiaIntercambiar.getSelectedIndex() - 1;
        Integer pilotoAjenoIndice = jTablePilotosProbadoresIntercambiar.getSelectedRow();
        Integer pilotoPropioIndice = jTablePilotosOficiales.getSelectedRow();
        Boolean oficial = true;
        if (pilotoPropioIndice == -1) {
            pilotoPropioIndice = jTablePilotosProbadores.getSelectedRow();
            oficial = false;
        }
        if (escuderiaIndice != -1 && pilotoAjenoIndice != -1 && pilotoPropioIndice != -1) {
            Escuderia escuderiaAjena = mundial.getEscuderia(escuderiaIndice);
            PilotoDecorador pilotoAjeno = escuderiaAjena.getPilotosProbadores().get(pilotoAjenoIndice);
            PilotoDecorador pilotoPropio;
            if (oficial) {
                pilotoPropio = escuderia.getPilotosOficiales().get(pilotoPropioIndice);
            } else {
                pilotoPropio = escuderia.getPilotosProbadores().get(pilotoPropioIndice);
            }
            if (Escuderia.sonPilotosIntercambiables(pilotoPropio,pilotoAjeno)) {
                if (escuderiaAjena.tienePresupuestoSuficiente(pilotoPropio.getSueldo()) && escuderia.tienePresupuestoSuficiente(pilotoAjeno.getSueldo())) {
                        escuderia.intercambiarPiloto(pilotoPropio, pilotoAjeno);
                    escuderiaAjena.intercambiarPiloto(pilotoAjeno, pilotoPropio);
                    cargarPilotosEscuderiaEnFormularioIntercambiar(escuderiaAjena);
                    cargarTablaPilotosOficiales();
                    cargarTablaPilotosProbadores();
                }
            }
        }
    }//GEN-LAST:event_jBtnIntercambiarProbadorActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (escuderia != null) {
            cargarPanelEntrenar();
            cargarPanelCarreras();
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jTablePilotosOficialesEntrenarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosOficialesEntrenarFocusGained
        jTablePilotosProbadoresEntrenar.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosOficialesEntrenarFocusGained

    private void jTablePilotosProbadoresEntrenarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePilotosProbadoresEntrenarFocusGained
        jTablePilotosOficialesEntrenar.getSelectionModel().clearSelection();
    }//GEN-LAST:event_jTablePilotosProbadoresEntrenarFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Integer circuitoIndice = jTableCircuitosEntrenar.getSelectedRow();
        Integer cocheIndice = jTableCochesEntrenar.getSelectedRow();
        Integer pilotoIndice = jTablePilotosOficialesEntrenar.getSelectedRow();
        Boolean oficial = true;
        if (pilotoIndice == -1) {
            pilotoIndice = jTablePilotosProbadoresEntrenar.getSelectedRow();
            oficial = false;
        }
        if (circuitoIndice != -1 && cocheIndice != -1 && pilotoIndice != -1) {
            Circuito circuito = mundial.getCircuito(circuitoIndice);
            Coche coche = escuderia.getCoches().get(cocheIndice);
            PilotoDecorador piloto;
            if (oficial) {
                piloto = escuderia.getPilotosOficiales().get(pilotoIndice);
            } else {
                piloto = escuderia.getPilotosProbadores().get(pilotoIndice);
            }
            escuderia.entrenar(circuito, piloto, coche);
            cargarPanelEntrenar();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBtnAñadirParticipanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAñadirParticipanteActionPerformed
        añadirParticipante();
    }//GEN-LAST:event_jBtnAñadirParticipanteActionPerformed

    private void jBtnEliminarParticipanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarParticipanteActionPerformed
        CarrerasTableModel modeloCarrera = (CarrerasTableModel)jTableCarreras.getModel();
        Carrera carrera = (Carrera) modeloCarrera.getElement(jTableCarreras.getSelectedRow());
        ParticipantesTableModel modelo = (ParticipantesTableModel) jTableParticipantes.getModel();
        Participante participante = (Participante) modelo.getElement(jTableParticipantes.getSelectedRow());
        carrera.getParticipantes().remove(participante);
        configurarPanelParticipantes(carrera.getParticipantes());
    }//GEN-LAST:event_jBtnEliminarParticipanteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameEscuderia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameEscuderia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameEscuderia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameEscuderia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new FrameEscuderia().setVisible(true);
                } catch (ClassNotFoundException | IOException ex) {
                    Logger.getLogger(FrameEscuderia.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAñadirParticipante;
    private javax.swing.JButton jBtnCocheAleatorio;
    private javax.swing.JButton jBtnDespedirPilotoOficial;
    private javax.swing.JButton jBtnDespedirPilotoProbador;
    private javax.swing.JButton jBtnEliminarCoche;
    private javax.swing.JButton jBtnEliminarParticipante;
    private javax.swing.JButton jBtnEscuderiaVolver;
    private javax.swing.JButton jBtnFicharLibreComoOficial;
    private javax.swing.JButton jBtnFicharLibreComoProbador;
    private javax.swing.JButton jBtnFicharOficialComoOficial;
    private javax.swing.JButton jBtnFicharOficialComoProbador;
    private javax.swing.JButton jBtnFicharProbadorComoOficial;
    private javax.swing.JButton jBtnFicharProbadorComoProbador;
    private javax.swing.JButton jBtnGuardarCoche;
    private javax.swing.JButton jBtnIntercambiarOficial;
    private javax.swing.JButton jBtnIntercambiarProbador;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBoxCoches;
    private javax.swing.JComboBox jComboBoxEscuderiaIntercambiar;
    private javax.swing.JComboBox jComboBoxOficiales;
    private javax.swing.JComboBox jComboBoxPrincipal;
    private javax.swing.JLabel jLGestionDeEscuderia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAero;
    private javax.swing.JLabel jLabelNeumaticos;
    private javax.swing.JLabel jLabelPotencia;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSlider jSliderAero;
    private javax.swing.JSlider jSliderNeumaticos;
    private javax.swing.JSlider jSliderPotencia;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableCarreras;
    private javax.swing.JTable jTableCircuitosEntrenar;
    private javax.swing.JTable jTableCoches;
    private javax.swing.JTable jTableCochesEntrenar;
    private javax.swing.JTable jTableParticipantes;
    private javax.swing.JTable jTablePilotosLibres;
    private javax.swing.JTable jTablePilotosOficiales;
    private javax.swing.JTable jTablePilotosOficialesEntrenar;
    private javax.swing.JTable jTablePilotosOficialesIntercambiar;
    private javax.swing.JTable jTablePilotosProbadores;
    private javax.swing.JTable jTablePilotosProbadoresEntrenar;
    private javax.swing.JTable jTablePilotosProbadoresIntercambiar;
    private javax.swing.JTextField jTextFieldModelo;
    // End of variables declaration//GEN-END:variables
    
    private Escuderia escuderia = null;

    private void cargarComboPincipal() {
        jComboBoxPrincipal.addItem("Escoja escuderia");
        for (Escuderia esc : mundial.getEscuderias()) {
            jComboBoxPrincipal.addItem(esc.getNombre());
        }
    }

    private void cargarEscuderiaEnVentana(Escuderia escuderia) {
        limpiarDatosDeVentana();
        this.escuderia = escuderia;
        cargarTablaCoches();
        cargarTablaPilotosOficiales();
        cargarTablaPilotosProbadores();
        cargarTablaPilotosLibres();
        cargarComboEscuderias();
        cargarPanelEntrenar();
        cargarPanelCarreras();
        configurarPanelParticipantes(new ArrayList<Participante>());
    }

    private void limpiarDatosDeVentana() {
        this.escuderia = null;
        limpiarTablaCoches();
    }

    private void cargarTablaCoches() {
        Iterator<Coche> cochesIterator = escuderia.getCoches().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTableCoches.getModel();
        limpiarTabla(jTableCoches);        
        while (cochesIterator.hasNext()) {
            Coche coche = cochesIterator.next();
            Object[] fila = new Object[]{coche.getModelo(), coche.getVelocidadEnRecta(), coche.getVelocidadEnCurva()};
            modelo.addRow(fila);
        }
        bloquearFormularioCoches(!escuderia.puedeFabricarCoche());
    }

    private void limpiarTablaCoches() {
        limpiarTabla(jTableCoches);
    }

    private void generarCaracteristicasAleatorias() {
        Double valorMaximo = Coche.VALOR_MAXIMO_CARACTERISTICAS;
        Double potencia = Math.random() * valorMaximo * 100;
        jSliderPotencia.setValue(potencia.intValue());
        Double aerodinamica = Math.random() * valorMaximo * 100;
        jSliderAero.setValue(aerodinamica.intValue());
        Double neumaticos = Math.random() * valorMaximo * 100;
        jSliderNeumaticos.setValue(neumaticos.intValue());
    }

    private void eliminarCoche() {
        borrarFilaSeleccionadaDeTabla(jTableCoches, escuderia.getCoches());
        bloquearFormularioCoches(false);
    }

    private void crearCoche() {
        Boolean correcto = validarFormularioNuevoCoche();
        if (correcto) {
            Coche coche = obtenerCocheDesdeFormulario();
            escuderia.fabricarCoche(coche);
            limpiarFormularioNuevoCoche();
            cargarTablaCoches();
        } else {
            JOptionPane.showMessageDialog(this, "Hay campos con valores no válidos", "Datosincorrectos", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Boolean validarFormularioNuevoCoche() {
        Boolean correcto = true;
        if (!jTextFieldModelo.getInputVerifier().verify(this.jTextFieldModelo)) {
            correcto = false;
            marcarComoErroneo(this.jTextFieldModelo);
        }
        return correcto;
    }

    private Coche obtenerCocheDesdeFormulario() {
        String modelo = jTextFieldModelo.getText();
        Double potencia = jSliderPotencia.getValue() * 0.01;
        Double aerodinamica = jSliderAero.getValue() * 0.01;
        Double neumaticos = jSliderNeumaticos.getValue() * 0.01;
        Coche coche = new Coche(modelo, potencia, aerodinamica, neumaticos);
        return coche;
    }

    private void limpiarFormularioNuevoCoche() {
        jTextFieldModelo.setText("");
        jSliderPotencia.setValue(0);
        jSliderAero.setValue(0);
        jSliderNeumaticos.setValue(0);
    }

    

    private void bloquearFormularioCoches(Boolean bloquear) {
        jTextFieldModelo.setEnabled(!bloquear);
        jSliderPotencia.setEnabled(!bloquear);
        jSliderAero.setEnabled(!bloquear);
        jSliderNeumaticos.setEnabled(!bloquear);
        jBtnGuardarCoche.setEnabled(!bloquear);
    }

    private void cargarTablaPilotosOficiales() {
        Iterator<PilotoOficial> pilotosIterator = escuderia.getPilotosOficiales().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosOficiales.getModel();
        limpiarTabla(jTablePilotosOficiales);        
        while (pilotosIterator.hasNext()) {
            PilotoOficial piloto = pilotosIterator.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
        jBtnDespedirPilotoOficial.setEnabled(escuderia.puedeDescartarPilotoOficial());
        jBtnFicharLibreComoOficial.setEnabled(escuderia.puedeFicharPilotoOficial());
    }

    private void cargarTablaPilotosProbadores() {
        Iterator<PilotoProbador> pilotosIterator = escuderia.getPilotosProbadores().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosProbadores.getModel();
        limpiarTabla(jTablePilotosProbadores);        
        while (pilotosIterator.hasNext()) {
            PilotoProbador piloto = pilotosIterator.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
        jBtnFicharLibreComoProbador.setEnabled(escuderia.puedeFicharPilotoProbador());
    }

    private void cargarTablaPilotosLibres() {
        Iterator<PilotoLibre> pilotosIterator = mundial.getPilotos().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosLibres.getModel();
        limpiarTabla(jTablePilotosLibres);        
        while (pilotosIterator.hasNext()) {
            PilotoLibre piloto = pilotosIterator.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal(), piloto.getSueldo()};
            modelo.addRow(fila);
        }
    }

    private void cargarComboEscuderias() {
        DefaultComboBoxModel modelo = (DefaultComboBoxModel) jComboBoxEscuderiaIntercambiar.getModel();
        modelo.removeAllElements();
        modelo.addElement("Escoja escuderia");
        for (Escuderia esc : mundial.getEscuderias()) {
            modelo.addElement(esc.getNombre());
        }
    }

    private void cargarPilotosEscuderiaEnFormularioIntercambiar(Escuderia escuderia) {
        Iterator<PilotoOficial> iteradorOficial = escuderia.getPilotosOficiales().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosOficialesIntercambiar.getModel();
        limpiarTabla(jTablePilotosOficialesIntercambiar);        
        while (iteradorOficial.hasNext()) {
            PilotoOficial piloto = iteradorOficial.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
        jBtnFicharOficialComoOficial.setEnabled(escuderia.puedeDescartarPilotoOficial());
        jBtnFicharOficialComoProbador.setEnabled(escuderia.puedeDescartarPilotoOficial());
        
        Iterator<PilotoProbador> iteradorProbador = escuderia.getPilotosProbadores().iterator();
        modelo = (DefaultTableModel) jTablePilotosProbadoresIntercambiar.getModel();
        limpiarTabla(jTablePilotosProbadoresIntercambiar);        
        while (iteradorProbador.hasNext()) {
            PilotoProbador piloto = iteradorProbador.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
    }

    private void cargarPanelEntrenar() {
        cargarTablaCircuitosEntrenar();
        cargarTablaCochesEntrenar();
        cargarTablaPilotosOficialesEntrenar();
        cargarTablaPilotosProbadoresEntrenar();
    }

    private void cargarTablaCircuitosEntrenar() {
        Iterator<Circuito> iterador = mundial.getCircuitos().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTableCircuitosEntrenar.getModel();
        limpiarTabla(jTableCircuitosEntrenar);        
        while (iterador.hasNext()) {
            Circuito circuito = iterador.next();
            Object[] fila = new Object[]{circuito.getNombre(), circuito.getCanon()};
            modelo.addRow(fila);
        }
    }

    private void cargarTablaCochesEntrenar() {
        Iterator<Coche> cochesIterator = escuderia.getCoches().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTableCochesEntrenar.getModel();
        limpiarTabla(jTableCochesEntrenar);        
        while (cochesIterator.hasNext()) {
            Coche coche = cochesIterator.next();
            Object[] fila = new Object[]{coche.getModelo(), coche.getPotencia(), coche.getAerodinamica(), coche.getNeumaticos()};
            modelo.addRow(fila);
        }
    }

    private void cargarTablaPilotosOficialesEntrenar() {
        Iterator<PilotoOficial> pilotosIterator = escuderia.getPilotosOficiales().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosOficialesEntrenar.getModel();
        limpiarTabla(jTablePilotosOficialesEntrenar);        
        while (pilotosIterator.hasNext()) {
            PilotoOficial piloto = pilotosIterator.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
    }

    private void cargarTablaPilotosProbadoresEntrenar() {
        Iterator<PilotoProbador> pilotosIterator = escuderia.getPilotosProbadores().iterator();
        DefaultTableModel modelo = (DefaultTableModel) jTablePilotosProbadoresEntrenar.getModel();
        limpiarTabla(jTablePilotosProbadoresEntrenar);        
        while (pilotosIterator.hasNext()) {
            PilotoProbador piloto = pilotosIterator.next();
            Object[] fila = new Object[]{piloto.getNombreCompleto(), piloto.getValoraciónGlobal()};
            modelo.addRow(fila);
        }
    }

    private void cargarCarrerasEnTabla() {
        jTableCarreras.setModel(new CarrerasTableModel(mundial.getCarreras()));
        jTableCarreras.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                Integer filaSelecionada = jTableCarreras.getSelectedRow();
                if (filaSelecionada != -1) {
                    CarrerasTableModel modelo = (CarrerasTableModel)jTableCarreras.getModel();
                    Carrera carrera = (Carrera) modelo.getElement(filaSelecionada);
                    ArrayList<Participante> participantes = carrera.getParticipantes(escuderia);
                    configurarPanelParticipantes(participantes);
                }
            }
        });
    }
    
    private void configurarPanelParticipantes(ArrayList<Participante> participantes) {
        cargarParticipantesEnTabla(participantes);
        cargarPilotosEnCombo();
        limpiarComboPilotos(participantes);
        cargarCochesEnCombo();
        limpiarComboCoches(participantes);
    }

    private void cargarParticipantesEnTabla(ArrayList<Participante> participantes) {
        jTableParticipantes.setModel(new ParticipantesTableModel(participantes));
    }

    private void cargarPanelCarreras() {
        cargarCarrerasEnTabla();
        cargarPilotosEnCombo();
        cargarCochesEnCombo();
    }

    private void cargarPilotosEnCombo() {
        jComboBoxOficiales.setModel(new DefaultComboBoxModel(escuderia.getPilotosOficiales().toArray()));
    }

    private void cargarCochesEnCombo() {
        jComboBoxCoches.setModel(new DefaultComboBoxModel(escuderia.getCoches().toArray()));
    }

    private void añadirParticipante() {
        PilotoOficial piloto = (PilotoOficial) jComboBoxOficiales.getModel().getSelectedItem();
        Coche coche = (Coche) jComboBoxCoches.getModel().getSelectedItem();
        Integer carreraIndice = jTableCarreras.getSelectedRow();
        if (piloto != null && coche != null && carreraIndice != -1) {
            Participante participante = new Participante(escuderia, piloto, coche);
            Carrera carrera = (Carrera) ((CarrerasTableModel)jTableCarreras.getModel()).getElement(carreraIndice);
            carrera.añadirParticipante(participante);
            configurarPanelParticipantes(carrera.getParticipantes(escuderia));
        }
    }

    private void limpiarComboPilotos(ArrayList<Participante> participantes) {
        for (Participante participante : participantes) {
            jComboBoxOficiales.removeItem(participante.getPiloto());
        }
    }

    private void limpiarComboCoches(ArrayList<Participante> participantes) {
        for (Participante participante : participantes) {
            jComboBoxCoches.removeItem(participante.getCoche());
        }
    }
}
